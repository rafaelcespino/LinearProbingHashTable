public class LinearProbingHashTable <K,V> {

    int size = 4;   //arbitrary number selected for initial size
    int numOfEntries = 0;
    private static class Entry<K,V>
    {
        K key;
        V value;
        boolean isDeleted = false;
    }

    private Entry<K,V> table[] = new Entry[size];

    private void rehash(){
        //stores current table into temp table before copying
        Entry<K,V> tempTable[] = new Entry [size];
        for(int i = 0; i < tempTable.length;i++)
        {
            tempTable[i] = table[i];
        }

        size *= 2;
        table = new Entry[size];

        for(int i = 0; i < tempTable.length;i++)
        {
            //hashes non deleted items into new table
            if(tempTable[i] != null && !tempTable[i].isDeleted)
                insert(tempTable[i].key,tempTable[i].value);
        }
    }

    public boolean insert(K key, V value)
    {
        //Throws an exception if the key is null
        if(key == null)
            throw new IllegalArgumentException("The key is invalid");

        //rehashes the table once it is at least half full
        if(numOfEntries >= size/2)
        {
            rehash();
        }

        //checks if the table if the new value is a duplicate
        for(int i = 0; i < table.length; i++)
        {
            //returns false if a duplicate is found
            if(table[i] != null && table[i].value.equals(value))
                return false;
        }

        //gets the hash value from the key using hashCode method
        int hashVal = key.hashCode()%size;

        //condition if the table entry at hashVal is empty
        if(table[hashVal] == null)
        {
            table[hashVal] = new Entry<K,V>();  //creates new entry in the empty spot
            table[hashVal].key = key;
            table[hashVal].value = value;
            numOfEntries++; //adds to counter of entries
            return true;
        }

        //condition if there is collision handled w/ linear probing
        else
        {
            for(int i = hashVal +1; i < table.length; i++)
            {
                //cells are tried until finding an empty cell
                if(table[i] == null && i+1 != table.length)
                {
                    table[i] = new Entry<K,V>();
                    table[i].key = key;
                    table[i].value = value;
                    numOfEntries++;
                    return true;
                }
            }

            //if all cells until the end of the table are filled, starts back at the beginning
            for(int i = 0; i < table.length;i++)
            {
                if(table[i] == null && i+1 != table.length)
                {
                    table[i] = new Entry<K,V>();
                    table[i].key = key;
                    table[i].value = value;
                    numOfEntries++;
                    return true;
                }
            }
        }
        return true;
    }

    public V find(K key)
    {
        for(int i = 0; i < table.length; i++)
        {
            if(table[i] != null && table[i].key.equals(key))
            {
                return table[i].value;  //returns the value if the key is found
            }
        }
        return null;    //returns null if the key is not found
    }

    public boolean delete(K key)
    {
        for(int i = 0; i < table.length;i++)
        {
            if(table[i] != null && table[i].key.equals(key))
            {
                table[i].isDeleted = true;  //marks the entry deleted if found
                return true;
            }

        }
        //returns false if entry is not found
        return false;
    }

    public int getHashValue(K key)
    {
        return key.hashCode()%size;  //returns the hash value generated by hashCode for the key
    }

    public int getLocation(K key)
    {
        for(int i = 0; i < table.length;i++)
        {
            if(table[i] != null && table[i].key.equals(key))
                return i;   //returns location of given key
        }
        return -1;  //returns -1 if the key is not found
    }

    //recursive function for creating the formatted hashtable string
    @Override
    public String toString()
    {
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < table.length;i++)
        {
            //condition if the table location is empty
            if(table[i] == null)
                sb.append(i + "\n");  //only prints the table number

            else
            {
                sb.append(i + " ");
                sb.append(table[i].key.toString() + " ");
                sb.append(table[i].value.toString());
                if(table[i].isDeleted)
                    sb.append(" deleted");
                sb.append("\n");
            }
        }

        return new String(sb);
    }



}
